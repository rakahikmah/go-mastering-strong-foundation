// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rahmatrdn/go-skeleton/internal/repository/mysql/entity"
	mock "github.com/stretchr/testify/mock"

	mysql "github.com/rahmatrdn/go-skeleton/internal/repository/mysql"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *UserRepository) Begin() (mysql.TrxObj, error) {
	ret := _m.Called()

	var r0 mysql.TrxObj
	if rf, ok := ret.Get(0).(func() mysql.TrxObj); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mysql.TrxObj)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, dbTrx, user
func (_m *UserRepository) Create(ctx context.Context, dbTrx mysql.TrxObj, user *entity.User) error {
	ret := _m.Called(ctx, dbTrx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mysql.TrxObj, *entity.User) error); ok {
		r0 = rf(ctx, dbTrx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) GetByEmail(ctx context.Context, email string) (*entity.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmailAndRole provides a mock function with given fields: ctx, email, role
func (_m *UserRepository) GetByEmailAndRole(ctx context.Context, email string, role entity.RoleType) (*entity.User, error) {
	ret := _m.Called(ctx, email, role)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.RoleType) *entity.User); ok {
		r0 = rf(ctx, email, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, entity.RoleType) error); ok {
		r1 = rf(ctx, email, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockByID provides a mock function with given fields: ctx, dbTrx, ID
func (_m *UserRepository) LockByID(ctx context.Context, dbTrx mysql.TrxObj, ID int64) (*entity.User, error) {
	ret := _m.Called(ctx, dbTrx, ID)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, mysql.TrxObj, int64) *entity.User); ok {
		r0 = rf(ctx, dbTrx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, mysql.TrxObj, int64) error); ok {
		r1 = rf(ctx, dbTrx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
