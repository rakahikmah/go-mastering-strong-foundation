// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"

	mock "github.com/stretchr/testify/mock"
)

// JsonPresenter is an autogenerated mock type for the JsonPresenter type
type JsonPresenter struct {
	mock.Mock
}

// BuildError provides a mock function with given fields: c, err
func (_m *JsonPresenter) BuildError(c *fiber.Ctx, err error) error {
	ret := _m.Called(c, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, error) error); ok {
		r0 = rf(c, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BuildSuccess provides a mock function with given fields: c, data, message, code
func (_m *JsonPresenter) BuildSuccess(c *fiber.Ctx, data interface{}, message string, code int) error {
	ret := _m.Called(c, data, message, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, interface{}, string, int) error); ok {
		r0 = rf(c, data, message, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewJsonPresenter interface {
	mock.TestingT
	Cleanup(func())
}

// NewJsonPresenter creates a new instance of JsonPresenter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJsonPresenter(t mockConstructorTestingTNewJsonPresenter) *JsonPresenter {
	mock := &JsonPresenter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
