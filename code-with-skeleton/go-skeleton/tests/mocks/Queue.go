// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	amqp091 "github.com/rabbitmq/amqp091-go"
	mock "github.com/stretchr/testify/mock"
)

// Queue is an autogenerated mock type for the Queue type
type Queue struct {
	mock.Mock
}

// BindQueue provides a mock function with given fields: key
func (_m *Queue) BindQueue(key string) (amqp091.Queue, error) {
	ret := _m.Called(key)

	var r0 amqp091.Queue
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (amqp091.Queue, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) amqp091.Queue); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(amqp091.Queue)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *Queue) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields:
func (_m *Queue) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleConsumedDeliveries provides a mock function with given fields: key, handle
func (_m *Queue) HandleConsumedDeliveries(key string, handle func(map[string]interface{}) error) {
	_m.Called(key, handle)
}

// Publish provides a mock function with given fields: key, message, attempts
func (_m *Queue) Publish(key string, message []byte, attempts int32) error {
	ret := _m.Called(key, message, attempts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, int32) error); ok {
		r0 = rf(key, message, attempts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reconnect provides a mock function with given fields:
func (_m *Queue) Reconnect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewQueue interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueue creates a new instance of Queue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueue(t mockConstructorTestingTNewQueue) *Queue {
	mock := &Queue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
