// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"

	parser "github.com/rahmatrdn/go-skeleton/internal/parser"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

// ParseQueryParams provides a mock function with given fields: c, req
func (_m *Parser) ParseQueryParams(c *fiber.Ctx, req parser.QueryParamsRequest) error {
	ret := _m.Called(c, req)

	if len(ret) == 0 {
		panic("no return value specified for ParseQueryParams")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, parser.QueryParamsRequest) error); ok {
		r0 = rf(c, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParserBodyRequest provides a mock function with given fields: c, req
func (_m *Parser) ParserBodyRequest(c *fiber.Ctx, req parser.BodyRequest) error {
	ret := _m.Called(c, req)

	if len(ret) == 0 {
		panic("no return value specified for ParserBodyRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, parser.BodyRequest) error); ok {
		r0 = rf(c, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParserBodyRequestWithUserID provides a mock function with given fields: c, req
func (_m *Parser) ParserBodyRequestWithUserID(c *fiber.Ctx, req parser.WithUserID) error {
	ret := _m.Called(c, req)

	if len(ret) == 0 {
		panic("no return value specified for ParserBodyRequestWithUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, parser.WithUserID) error); ok {
		r0 = rf(c, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParserBodyWithIntIDPathParams provides a mock function with given fields: c, req
func (_m *Parser) ParserBodyWithIntIDPathParams(c *fiber.Ctx, req parser.WithPathID) error {
	ret := _m.Called(c, req)

	if len(ret) == 0 {
		panic("no return value specified for ParserBodyWithIntIDPathParams")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, parser.WithPathID) error); ok {
		r0 = rf(c, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParserBodyWithIntIDPathParamsAndUserID provides a mock function with given fields: c, req
func (_m *Parser) ParserBodyWithIntIDPathParamsAndUserID(c *fiber.Ctx, req parser.WithPathIDAndUserID) error {
	ret := _m.Called(c, req)

	if len(ret) == 0 {
		panic("no return value specified for ParserBodyWithIntIDPathParamsAndUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, parser.WithPathIDAndUserID) error); ok {
		r0 = rf(c, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParserIntIDFromPathParams provides a mock function with given fields: c
func (_m *Parser) ParserIntIDFromPathParams(c *fiber.Ctx) (int64, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for ParserIntIDFromPathParams")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) (int64, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) int64); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*fiber.Ctx) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParserUserID provides a mock function with given fields: c
func (_m *Parser) ParserUserID(c *fiber.Ctx) (int64, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for ParserUserID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) (int64, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) int64); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*fiber.Ctx) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
